const path = require('path');
const fs = require('fs');
const reader = require('xlsx')
const { parse } = require('csv-parse/sync')

// get folder and filenames
const targetFilesPath = path.join(__dirname, 'targetFiles')

const getFolderAndFileNames = () => {
  const files = []
  fs
    .readdirSync(targetFilesPath, { withFileTypes: true })
    .forEach(dirent => {
      const isFolder = dirent.isDirectory()

      if (isFolder) {
        return
      }

      files.push(dirent.name)
    })


  const removedAutoGeneratedFiles = files.filter((fileName) => {
    if (typeof fileName === "string" && fileName.endsWith('- flatten by phone.xlsx')) {
      return false
    }
    return true
  })
  return { files: removedAutoGeneratedFiles }
}

const foldersAndFiles = getFolderAndFileNames()

const filesWithoutExtensions = (() => {

  const fileDetails = foldersAndFiles.files.map(fullFileName => {
    const fileNameOnly = fullFileName.substring(0, fullFileName.lastIndexOf('.'));
    return {
      fullName: fullFileName,
      withoutPrefix: fileNameOnly,
      ext: path.extname(fullFileName)
    }
  })

  const uniqueFileNames = [...new Set(fileDetails.map(a => a.withoutPrefix))];

  //  modify duplicates
  let filteredFileDetails = []

  uniqueFileNames.map(withoutPrefix => {
    // duplicate count check
    const tempArray = fileDetails.filter(f => f.withoutPrefix === withoutPrefix)
    const duplicateCount = tempArray.length
    if (duplicateCount === 1) {
      filteredFileDetails.push(tempArray[0])
    } else if (duplicateCount > 1) {
      const temp2 = tempArray.map((f, i) => {
        if (i === 0) {
          return f
        } else {
          return { ...f, withoutPrefix: f.withoutPrefix + i }
        }
      })
      temp2.forEach(v => {
        filteredFileDetails.push(v)
      })
    }
  })

  return filteredFileDetails
})()


// for each remaining file
// read its contents
// for each source row
// capture the name, property address 1
// add to a final array of row objects

filesWithoutExtensions.forEach(fileDetails => {
  const { withoutPrefix } = fileDetails;

  const mobileReadyRows = getRecords(fileDetails)

  if (mobileReadyRows.length) {
    const saveFolderPath = path.join(__dirname, 'targetFiles')
    const filePath = path.join(saveFolderPath, `${withoutPrefix} - flatten by phone.xlsx`)
    fs.writeFile(filePath, '', function (err) {
      if (err) throw err;

      const file = reader.readFile(filePath)
      let data = mobileReadyRows

      const ws = reader.utils.json_to_sheet(data)
      clearArray(file.SheetNames) // remove default sheet
      reader.utils.book_append_sheet(file, ws, "Sheet1")

      reader.writeFile(file, filePath)
    });
  }

})


function getRecords(sourceDetails = {
  fullName: '',
  withoutPrefix: '',
  ext: ''
}) {

  if (sourceDetails.ext.toLowerCase() === ".csv") {
    return getRecordsFromCsv(sourceDetails.fullName)
  } else if (sourceDetails.ext.toLowerCase() === ".xlsx") {
    return getRecordsFromXlsx(sourceDetails.fullName)
  }
  return []
}

function getRecordsFromCsv(fullName = '') {
  const targetFile = path.join(__dirname, 'targetFiles', fullName)

  const fileContents = fs.readFileSync(targetFile, 'utf-8')

  const mobileReadyRows = []

  const records = parse(fileContents, { columns: true, skipEmptyLines: true });

  const phoneNumberColumnKeys = getPhoneNumberColumnKeys(records)

  records.forEach(record => {
    const getFilteredRow = getFilteredObject(record)
    phoneNumberColumnKeys.map(phoneNumberColumnKey => {
      const phoneNumber = record[phoneNumberColumnKey]
      if (phoneNumber) {
        mobileReadyRows.push({
          phone: phoneNumber,
          ...getFilteredRow
        })
      }
    })
  })

  return mobileReadyRows
}

function getRecordsFromXlsx(fullName = '') {

  const targetFile = path.join(__dirname, 'targetFiles', fullName)

  const mobileReadyRows = []

  const workBook = reader.readFile(targetFile)
  workBook.SheetNames.forEach(y => {
    let worksheet = workBook.Sheets[y];

    const records = reader.utils.sheet_to_json(worksheet)
    const phoneNumberColumnKeys = getPhoneNumberColumnKeys(records)
    records.forEach(record => {
      const getFilteredRow = getFilteredObject(record)
      phoneNumberColumnKeys.map(phoneNumberColumnKey => {
        const phoneNumber = record[phoneNumberColumnKey]
        if (phoneNumber) {
          mobileReadyRows.push({
            phone: phoneNumber,
            ...getFilteredRow
          })
        }
      })
    })
  })

  return mobileReadyRows
}


// remove fields with name containing word 'phone'
function getFilteredObject(object = {}) {
  const newObject = {}

  for (const key in object) {
    if (Object.hasOwnProperty.call(object, key)) {
      const keyName = key.toLowerCase()
      if (!keyName.includes('phone')) {
        const value = object[key];
        newObject[key] = value
      }
    }
  }

  return newObject
}

// should return list of name of phone number columns
function getPhoneNumberColumnKeys(objects = []) {
  if (objects.length) {

    const columnNames = Object.keys(objects[0])

    const columnNamesContainingWordPhone = []

    columnNames.forEach(columnName => {
      if (columnName.toLowerCase().includes('phone')) {
        columnNamesContainingWordPhone.push(columnName)
      }
    })


    // find a object that has not empty values in phone columns
    const objectWithPhoneColumns = {}

    for (let i = 0; i < objects.length; i++) {
      const object = objects[i];
      if (Object.keys(objectWithPhoneColumns).length === columnNamesContainingWordPhone.length) {
        break;
      }
      Object.keys(object).map(key => {
        if (columnNamesContainingWordPhone.some((columnName) => columnName === key)) {
          const value = object[key]
          if (value && !objectWithPhoneColumns.hasOwnProperty(key)) {
            objectWithPhoneColumns[key] = value
          }
        }
      })
    }

    const phoneNumberColumnKeys = []
    // validate which fields are contains 10 digit phone numbers, discard rest fields
    const objectWithPhoneColumnsKeys = Object.keys(objectWithPhoneColumns)
    if (objectWithPhoneColumnsKeys.length) {
      for (const key in objectWithPhoneColumns) {
        if (Object.hasOwnProperty.call(objectWithPhoneColumns, key)) {
          if (objectWithPhoneColumns[key]) {
            const value = String(objectWithPhoneColumns[key]);
            if (!isNaN(value) && value.length === 10) {
              phoneNumberColumnKeys.push(key)
            }
          }
        }
      }
    }
    return phoneNumberColumnKeys
  }
  return []
}

function clearArray(array) {
  while (array.length) {
    array.pop();
  }
}